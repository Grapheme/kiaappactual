// Generated by CoffeeScript 1.7.1
(function() {
  window.Scroll = (function() {
    Scroll.prototype.currentMedia = null;

    function Scroll(options) {
      if (options == null) {
        options = {};
      }
      this.options = {
        isMaximum: function() {
          return console.debug('isMaximum');
        },
        isMinimum: function() {
          return console.debug('isMinimum');
        },
        acceleration: 0,
        accBraking: 10,
        braking: 0,
        currentSpeed: 0,
        edge: 500
      };
      this.isAnimate = false;
      $.extend(this.options, options);
      this.init();
    }

    Scroll.prototype.init = function() {
      this.objects = {
        scroller: $('#scroller'),
        wrapper: $('#scroller').closest('.scrollerWrapper')
      };
      window.Animation.addResizeCallback((function(_this) {
        return function() {
          return _this._resize();
        };
      })(this));
      return this._setInit();
    };

    Scroll.prototype._setInit = function() {
      var src;
      src = $(this.objects.wrapper).css('background-image');
      src = src.replace(/^url\(["']?/, '').replace(/["']?\)$/, '');
      return $(this.objects.scroller).css({
        backgroundImage: 'none'
      }).spritespin({
        source: src,
        width: parseInt(this.objects.wrapper.css('width')),
        height: parseInt(this.objects.wrapper.css('height')),
        frames: 55,
        framesX: 11,
        loop: false,
        behavior: false,
        animate: false,
        renderer: 'background',
        onInit: (function(_this) {
          return function(event) {
            _this.api = _this.objects.scroller.spritespin('api');
            _this.api.updateFrame(26);
            _this.events();
            return _this.start();
          };
        })(this)
      });
    };

    Scroll.prototype.start = function() {
      return this.ticTimer = setInterval((function(_this) {
        return function() {
          return _this.tic();
        };
      })(this), 1);
    };

    Scroll.prototype.events = function() {
      var mousewheelevt;
      mousewheelevt = /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel";
      if (document.attachEvent) {
        document.attachEvent("on" + mousewheelevt, (function(_this) {
          return function(event) {
            return _this.wheel(event);
          };
        })(this));
      } else if (document.addEventListener) {
        document.addEventListener(mousewheelevt, (function(_this) {
          return function(event) {
            return _this.wheel(event);
          };
        })(this), false);
      }
      if ((navigator.userAgent.indexOf("Safari") > -1) && navigator.userAgent.indexOf("Chrome") === -1) {
        return $('body').on('DOMMouseScroll mousewheel touchmove', (function(_this) {
          return function(event) {
            return _this.wheel(event);
          };
        })(this));
      }
    };

    Scroll.prototype.wheel = function(event) {
      var deltaY;
      if (this.isAnimate) {
        return;
      }
      if (/Firefox/i.test(navigator.userAgent)) {
        deltaY = event.detail;
      } else {
        deltaY = event.deltaY;
      }
      if ((navigator.userAgent.indexOf("Safari") > -1) && navigator.userAgent.indexOf("Chrome") === -1) {
        deltaY = -deltaY;
      }
      if (deltaY > 0) {
        this.options.acceleration = this.options.acceleration + deltaY * 3;
      }
      if (deltaY < 0) {
        return this.options.braking = this.options.braking - deltaY * 3;
      }
    };

    Scroll.prototype.tic = function() {
      var difference;
      this.options.acceleration = this.options.acceleration - this.options.accBraking;
      if (this.options.acceleration < 0) {
        this.options.acceleration = 0;
      }
      this.options.braking = this.options.braking - this.options.accBraking;
      if (this.options.braking < 0) {
        this.options.braking = 0;
      }
      difference = this.options.acceleration - this.options.braking;
      this.options.currentSpeed = this.options.currentSpeed + difference;
      if (this.options.currentSpeed !== 0) {
        this.options.currentSpeed = this.options.currentSpeed / 3;
      }
      if (Math.abs(this.options.currentSpeed) < this.options.accBraking) {
        this.options.currentSpeed = 0;
      }
      this.render();
      if (this.options.currentSpeed < -this.options.edge) {
        this.options.isMinimum();
        clearInterval(this.ticTimer);
        this.reset();
        return;
      }
      if (this.options.currentSpeed > this.options.edge) {
        this.options.isMaximum();
        clearInterval(this.ticTimer);
        this.reset();
      }
    };

    Scroll.prototype.reset = function() {
      this.isAnimate = true;
      return $('<div />').css({
        left: this.options.currentSpeed
      }).animate({
        left: 0
      }, {
        duration: 500,
        easing: 'easeOutBack',
        progress: (function(_this) {
          return function(now, fx) {
            _this.options.currentSpeed = parseInt($(now.elem).css('left'));
            return _this.render();
          };
        })(this),
        complete: (function(_this) {
          return function() {
            _this.isAnimate = false;
            _this.options.currentSpeed;
            _this.options.acceleration = 0;
            _this.options.braking = 0;
            return _this.start();
          };
        })(this)
      });
    };

    Scroll.prototype.render = function() {
      var direction, framesDelta, percent, speed;
      speed = Math.abs(this.options.currentSpeed);
      direction = speed !== 0 ? this.options.currentSpeed / speed : 0;
      percent = speed / this.options.edge;
      framesDelta = Math.round(26 * percent);
      if (framesDelta > 27) {
        framesDelta = 27;
      }
      return this.api.updateFrame(27 + direction * framesDelta);
    };

    Scroll.prototype._resize = function() {
      this.previousMedia = this.currentMedia;
      this._detectCurrentMedia();
      if (this.previousMedia !== this.currentMedia) {
        clearTimeout(this.timeout);
        return this.timeout = setTimeout((function(_this) {
          return function() {
            $(_this.objects.scroller).spritespin('destroy');
            return _this._setInit();
          };
        })(this), 100);
      }
    };

    Scroll.prototype._detectCurrentMedia = function() {
      if ($('body').css('z-index') === "1" || $('body').css('z-index') === "2") {
        return this.currentMedia = 'normal';
      } else {
        return this.currentMedia = 'big';
      }
    };

    return Scroll;

  })();

}).call(this);

//# sourceMappingURL=scroll.map
