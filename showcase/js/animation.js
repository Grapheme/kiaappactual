// Generated by CoffeeScript 1.7.1
(function() {
  window.Animation = (function() {
    function Animation() {}

    Animation.prototype.isAnimate = false;

    Animation.prototype.direction = 'forward';

    Animation.prototype.objects = {
      from: null,
      to: null
    };

    Animation.prototype.options = null;

    Animation.prototype.rotateAngle = 18;

    Animation.prototype.rotateAngleRad = null;

    Animation.prototype.pageCallbacks = [];

    Animation.prototype.resizeCallbacks = [];

    Animation.prototype.init = function(direction, from, to, options) {
      this.direction = direction;
      this.objects.from = from;
      this.objects.to = to;
      this.options = options;
      this.rotateAngleRad = this.rotateAngle * Math.PI / 180;
      this.planes = this.getPlanes(this.objects.to);
      this.AnimationObject = new window.animationTypes[options.type](this.objects.from, this.objects.to, this.options);
      return this.prepare();
    };

    Animation.prototype.run = function(callback) {
      return this[this.direction]((function(_this) {
        return function() {
          return callback();
        };
      })(this));
    };

    Animation.prototype.forward = function(callback) {
      return this.AnimationObject.forward().run((function(_this) {
        return function() {
          _this.runPageCallbacks();
          return callback();
        };
      })(this));
    };

    Animation.prototype.back = function(callback) {
      return this.AnimationObject.back().run((function(_this) {
        return function() {
          _this.runPageCallbacks();
          return callback();
        };
      })(this));
    };

    Animation.prototype.resize = function() {
      if (this.AnimationObject) {
        this.AnimationObject.resize();
        this.runResizeCallbacks();
      }
      if (window.app) {
        return window.app.article.infoBlocksPosition();
      }
    };

    Animation.prototype.overflow = function(overflow) {
      if (overflow == null) {
        overflow = false;
      }
      if (overflow) {
        return $('body').addClass('overflowHidden');
      } else {
        return $('body').removeClass('overflowHidden');
      }
    };

    Animation.prototype.addPageCallback = function(callback) {
      return this.pageCallbacks.push(callback);
    };

    Animation.prototype.runPageCallbacks = function() {
      var callback, index, _ref;
      _ref = this.pageCallbacks;
      for (index in _ref) {
        callback = _ref[index];
        callback();
      }
      return this.pageCallbacks = [];
    };

    Animation.prototype.addResizeCallback = function(callback) {
      return this.resizeCallbacks.push(callback);
    };

    Animation.prototype.runResizeCallbacks = function() {
      var callback, index, _ref, _results;
      _ref = this.resizeCallbacks;
      _results = [];
      for (index in _ref) {
        callback = _ref[index];
        _results.push(callback());
      }
      return _results;
    };

    Animation.prototype.showInfoBlocks = function(plane) {
      var infoBlock, width;
      infoBlock = $('.infoBlock:not(.custom)', plane);
      infoBlock.css('opacity', 1);
      window.app.article.infoBlocksPosition();
      $('h2, .description', infoBlock).hide();
      width = $('.titleLine', infoBlock).width();
      $('h2, .description', infoBlock).fadeIn('slow');
      if ($('.titleLine', infoBlock).length) {
        return $('.titleLine', infoBlock).css({
          width: 0,
          opacity: 0
        }).animate({
          width: width,
          opacity: 1
        }, {
          progress: (function(_this) {
            return function(now, fx) {
              var mr;
              mr = width - $(now.elem).width();
              return $('.titleLine', infoBlock).css({
                marginRight: mr
              });
            };
          })(this),
          duration: 300,
          queue: false
        });
      } else {
        return $('h2, .description', infoBlock).fadeIn('slow');
      }
    };

    Animation.prototype.hideInfoBlocks = function(plane) {
      var infoBlock;
      infoBlock = $('.infoBlock:not(.custom)', plane);
      return infoBlock.animate({
        opacity: 0
      }, {
        duration: 500
      });
    };

    Animation.prototype.prepare = function(planes, fullscreen) {
      var contentContainer, planeContent, prop, properties, value, width;
      if (planes == null) {
        planes = this.planes;
      }
      if (fullscreen == null) {
        fullscreen = true;
      }
      contentContainer = $('.planeWrapper', planes.right);
      this.article = $(planes.right).closest('article');
      this.article.height(window.innerHeight);
      this.originWidth = contentContainer.css('min-width');
      width = fullscreen ? this.article.width() : this.originWidth;
      properties = this.calculatePlane(width, this.article.height());
      for (prop in properties) {
        value = properties[prop];
        $(planes.right).css(prop, value);
      }
      if ($(planes.left).length) {
        $(planes.left).first().css('height', this.article.height());
      }
      window.Transitions.rotate(planes.right, this.rotateAngle);
      window.Transitions.rotate(contentContainer, -this.rotateAngle);
      contentContainer.css({
        width: this.article.width(),
        height: this.article.height()
      });
      planeContent = $('.planeContent', contentContainer);
      if (planeContent.hasClass('one')) {
        width = this.article.width();
      } else {
        width = planeContent.width(window.Animation.calc.baseWidth - window.Animation.calc.offsetLeft - 50);
      }
      planeContent.width(width);
      return planeContent.height(this.article.height());
    };

    Animation.prototype.getPlanes = function(article) {
      var planes;
      planes = {};
      planes.left = $('.plane.left', article);
      planes.right = $('.plane.right', article);
      return planes;
    };

    Animation.prototype.calculatePlane = function(baseWidth, baseHeight) {
      var properties;
      this.calc = this.getCalcObject(baseWidth, baseHeight);
      properties = {};
      properties.width = this.calc.width;
      properties.height = this.calc.height;
      properties.paddingTop = this.calc.offsetY;
      properties.top = -this.calc.heightB;
      properties.marginLeft = this.calc.offsetLeft;
      return properties;
    };

    Animation.prototype.getCalcObject = function(baseWidth, baseHeight) {
      var angle, calc, prop, value;
      angle = this.rotateAngleRad;
      if (typeof baseWidth === "string") {
        baseWidth = this.getSizeInPixels(baseWidth);
      }
      baseWidth = baseWidth + 50;
      calc = {};
      calc.baseWidth = baseWidth;
      calc.baseHeight = baseHeight;
      calc.offsetX = baseHeight * Math.sin(angle);
      calc.offsetWidth = baseWidth + calc.offsetX;
      calc.offsetY = calc.offsetWidth * Math.tan(angle);
      calc.width = calc.offsetWidth * Math.cos(angle);
      calc.heightA = baseHeight * Math.cos(angle);
      calc.heightB = calc.offsetWidth * Math.sin(angle);
      calc.height = calc.heightA + calc.offsetX;
      calc.offsetLeft = calc.offsetY * Math.sin(angle);
      calc.offsetRight = calc.offsetLeft - baseWidth;
      calc.offsetRight2 = (this.article.width() - baseWidth) / Math.cos(angle) / Math.cos(angle);
      for (prop in calc) {
        value = calc[prop];
        calc[prop] = Math.round(value);
      }
      return calc;
    };

    Animation.prototype.getSizeInPixels = function(size) {
      if (size.indexOf("%") > -1) {
        return this.article.width() * parseFloat(size) / 100;
      }
      if (size.indexOf("px") > -1) {
        return parseInt(size);
      }
    };

    return Animation;

  })();

  window.Animation = new Animation();

}).call(this);

//# sourceMappingURL=animation.map
