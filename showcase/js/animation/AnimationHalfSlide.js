// Generated by CoffeeScript 1.7.1
(function() {
  var AnimationHalfSlide,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AnimationHalfSlide = (function(_super) {
    __extends(AnimationHalfSlide, _super);

    AnimationHalfSlide.prototype.type = 'halfSlide';

    AnimationHalfSlide.prototype.durations = {
      main: 1200
    };

    function AnimationHalfSlide(from, to, options) {
      var planes;
      AnimationHalfSlide.__super__.constructor.apply(this, arguments);
      planes = window.Animation.getPlanes(this.objects.to);
      this.offsetBack = parseInt($(planes.right).css('left'));
      this._init();
      this.forward();
      return this;
    }

    AnimationHalfSlide.prototype._forward = function(callback) {
      var offset, planes;
      planes = window.Animation.getPlanes(this.objects.to);
      this.back();
      offset = this.offsetBack + this.getOffset();
      return this._base(callback, offset);
    };

    AnimationHalfSlide.prototype._back = function(callback) {
      this.forward();
      return this._base(callback, this.offsetBack);
    };

    AnimationHalfSlide.prototype._base = function(callback, offset) {
      var planes;
      planes = window.Animation.getPlanes(this.objects.to);
      this.arrow.removeClass('forward back').addClass(this.direction);
      switch (this.direction) {
        case 'back':
          window.Animation.hideInfoBlocks(planes.right);
          break;
        default:
          window.Animation.hideInfoBlocks(planes.left);
      }
      return $(planes.right).animate({
        left: "" + offset
      }, {
        duration: this.durations.main / 2,
        easing: 'easeInOutQuad',
        queue: false,
        progress: (function(_this) {
          return function(now, fix) {
            var value;
            value = parseInt($(planes.right).css('left'));
            $(planes.right).css('left', value);
            _this.arrowAlign();
            return _this._alignBg();
          };
        })(this),
        complete: (function(_this) {
          return function() {
            _this.arrowAlign();
            switch (_this.direction) {
              case 'back':
                window.Animation.showInfoBlocks(planes.left);
                break;
              default:
                window.Animation.showInfoBlocks(planes.right);
            }
            return callback();
          };
        })(this)
      });
    };

    AnimationHalfSlide.prototype._alignBg = function() {
      var offset, outRight, planes;
      planes = window.Animation.planes;
      offset = $('.planeWrapper', planes.right).offset();
      offset.right = offset.left + $('.planeBg', planes.right).outerWidth();
      offset.bottom = offset.top + $('.planeBg', planes.right).outerHeight();
      outRight = Math.round(offset.right - window.Animation.article.width());
      console.debug(outRight);
      return $('.planeBg', planes.right).css('right', outRight);
    };

    AnimationHalfSlide.prototype._init = function() {
      var angle, placer, planes, width;
      planes = window.Animation.getPlanes(this.objects.to);
      if ($(planes.left).hasClass('noSlide')) {
        return;
      }
      this.arrow = $('<a class="slidesArrow"><div class="placer"></div></a>').appendTo(this.objects.to);
      placer = $('.placer', this.arrow);
      $(this.arrow).on('click', (function(_this) {
        return function(event) {
          return _this.run();
        };
      })(this));
      angle = window.Animation.rotateAngle * Math.PI / 180;
      window.Transitions.rotate(this.arrow, window.Animation.rotateAngle);
      width = $(this.arrow).width();
      $(this.arrow).css({
        left: window.Animation.calc.offsetX
      });
      $(placer).css({
        width: 0
      });
      return $(placer).animate({
        width: width
      }, {
        duration: this.durations.mirco,
        progress: (function(_this) {
          return function(now, fx) {
            var ml;
            ml = width - $(now.elem).width();
            return $(now.elem).css({
              marginLeft: ml
            });
          };
        })(this)
      });
    };

    AnimationHalfSlide.prototype.getProperties = function(properties) {
      this.options.offset = this.getOffset();
      switch (this.direction) {
        case 'forward':
          properties.left = this.offsetBack;
          break;
        default:
          properties.left = this.offsetBack + this.getOffset();
      }
      return properties;
    };

    AnimationHalfSlide.prototype._resize = function(planes) {
      this.options.offset = this.getOffset;
      return this.arrowAlign();
    };

    AnimationHalfSlide.prototype.arrowAlign = function() {
      var calc, left, offset, planes;
      planes = window.Animation.getPlanes(this.objects.to);
      calc = window.Animation.getCalcObject(this.objects.to.width(), this.objects.to.height());
      left = parseInt($(planes.right).css('left'));
      offset = window.Animation.calc.offsetX + left - this.offsetBack;
      return $(this.arrow).css({
        left: offset
      });
    };

    AnimationHalfSlide.prototype.getOffset = function() {
      var calc;
      calc = window.Animation.getCalcObject(this.objects.to.width(), this.objects.to.height());
      return this.objects.to.width() - calc.offsetX;
    };

    return AnimationHalfSlide;

  })(window.AnimationAbstract);

  $(function() {
    return window.animationTypes.halfSlide = AnimationHalfSlide;
  });

}).call(this);

//# sourceMappingURL=AnimationHalfSlide.map
