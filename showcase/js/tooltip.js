// Generated by CoffeeScript 1.7.1
(function() {
  window.Tooltip = (function() {
    function Tooltip(options) {
      this.initVars();
      $.extend(this.options, options);
      this.animationStatus = false;
      this.render();
    }

    Tooltip.prototype.render = function() {
      this.objects.point = $('<a />').addClass("tooltip " + this.options.type).attr('id', this.options.id).hide();
      this.options.container.append(this.objects.point);
      this.options.right = parseInt(this.objects.point.css('right'));
      this.objects.container = $('<div />').addClass('tooltipContainer').appendTo(this.objects.point);
      this.objects.image = $('<div />').addClass('image').appendTo(this.objects.container);
      this.objects.sattelite = $('<div />').addClass('sattelite').appendTo(this.objects.container);
      this.objects.background = $('<div />').addClass('tooltipBackground').addClass(this.options.color).css('left', this.getBackgroundPosition()).appendTo(this.objects.container);
      this.objects.title = $('<div />').addClass('title').text(this.options.title).appendTo(this.objects.background);
      this.objects.link = $('<a />').addClass('link').appendTo(this.objects.container);
      return this.initEvents();
    };

    Tooltip.prototype.getBackgroundPosition = function() {
      var left;
      left = parseInt($(this.objects.point).css('right')) + $(this.objects.container).width();
      return left;
    };

    Tooltip.prototype.initEvents = function() {
      this.rotateSattelite();
      this.objects.link.on('click', (function(_this) {
        return function(event) {
          event.preventDefault();
          return window.app.popup(_this.options.id);
        };
      })(this));
      this.objects.link.on('mouseenter', (function(_this) {
        return function(event) {
          return _this.showTooltip();
        };
      })(this));
      return this.objects.link.on('mouseout', (function(_this) {
        return function(event) {
          return _this.hideTooltip('fast');
        };
      })(this));
    };

    Tooltip.prototype.resize = function() {
      return this.objects.background.css('left', this.getBackgroundPosition());
    };

    Tooltip.prototype.showTooltip = function() {
      this.animationStatus = 'show';
      this.objects.sattelite.fadeOut('slow');
      this.objects.image.clearQueue().stop().animate({
        'opacity': 0
      }, {
        duration: 500,
        queue: false
      });
      return this.objects.background.clearQueue().stop().animate({
        left: 0
      }, {
        duration: 500,
        queue: false,
        easing: 'easeOutBack',
        complete: (function(_this) {
          return function() {
            return _this.animationStatus = false;
          };
        })(this)
      });
    };

    Tooltip.prototype.hideTooltip = function(speed) {
      var animation;
      if (speed == null) {
        speed = 'normal';
      }
      this.animationStatus = 'hide';
      this.objects.sattelite.fadeIn('fast');
      this.objects.image.clearQueue().stop().animate({
        'opacity': 1
      }, {
        duration: 300,
        queue: false
      });
      animation = (function() {
        switch (speed) {
          case 'normal':
            return {
              duration: 500,
              easing: 'easeInBack',
              queue: false
            };
          default:
            return {
              duration: 300,
              queue: false
            };
        }
      })();
      animation.complete = (function(_this) {
        return function() {
          return _this.animationStatus = false;
        };
      })(this);
      return this.objects.background.clearQueue().stop().animate({
        left: this.getBackgroundPosition()
      }, animation);
    };

    Tooltip.prototype.show = function() {
      return this.objects.point.fadeIn(this.options.durations.slide);
    };

    Tooltip.prototype.rotateSattelite = function() {
      this.objects.sattelite.css({
        transform: "rotate(" + this.options.degree + "deg)"
      });
      ++this.options.degree;
      if (this.options.degree === 360) {
        this.options.degree = 0;
      }
      return this.rotateTimer = setTimeout((function(_this) {
        return function() {
          return _this.rotateSattelite();
        };
      })(this), 15);
    };

    Tooltip.prototype.initVars = function() {
      this.objects = {
        point: null,
        satellite: null,
        line: null,
        title: null
      };
      return this.options = {
        container: null,
        id: '',
        title: '',
        type: 'right',
        position: {
          top: 100,
          right: 100
        },
        durations: {
          rotate: 600,
          slide: 1000
        },
        degree: 135
      };
    };

    Tooltip.prototype.debug = function() {
      return console.debug(this);
    };

    return Tooltip;

  })();

}).call(this);

//# sourceMappingURL=tooltip.map
