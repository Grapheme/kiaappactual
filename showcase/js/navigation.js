// Generated by CoffeeScript 1.7.1
(function() {
  window.Navigation = (function() {
    Navigation.prototype.url = {
      map: "data/pages.json",
      html: "data/pages/"
    };

    Navigation.prototype.pages = [];

    Navigation.prototype.current = 0;

    Navigation.prototype.content = {
      previous: null,
      current: null,
      next: null
    };

    function Navigation(current) {
      if (current == null) {
        current = 0;
      }
      this.current = current;
    }

    Navigation.prototype.init = function(callback) {
      return $.getJSON(this.url.map, (function(_this) {
        return function(data) {
          var hash, i, page, _i, _len, _ref;
          i = 0;
          _ref = data.pages;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            page = _ref[_i];
            page.index = i;
            _this.pages.push(page);
            i++;
          }
          if (location.hash !== "") {
            hash = location.hash.replace("#", "");
            page = _this.getPageByAlias(hash);
            if (page) {
              _this.current = page.index;
            }
          }
          return _this.loadAllPages(function() {
            return _this.goto(_this.current, callback);
          });
        };
      })(this));
    };

    Navigation.prototype.loadAllPages = function(callback) {
      var startIndex;
      startIndex = this.pages[0].index;
      return this.loadPage(startIndex, callback);
    };

    Navigation.prototype.loadPage = function(index, callback) {
      var alias;
      if (this.pages[index]) {
        alias = this.pages[index].alias;
        return this.loadHtml(alias, (function(_this) {
          return function(data) {
            _this.pages[index].content = data;
            if (_this.pages[index + 1]) {
              return _this.loadPage(index + 1, function() {
                return callback();
              });
            } else {
              return callback();
            }
          };
        })(this));
      }
    };

    Navigation.prototype.next = function(callback) {
      return this.goto(this.current + 1, callback);
    };

    Navigation.prototype.previous = function(callback) {
      return this.goto(this.current - 1, callback);
    };

    Navigation.prototype.getPageByAlias = function(alias) {
      var page, _i, _len, _ref;
      _ref = this.pages;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        page = _ref[_i];
        if (page.alias === alias) {
          return page;
        }
      }
      return null;
    };

    Navigation.prototype.isLast = function(page) {
      if (page) {
        return page.index === this.pages.length - 1;
      } else {
        return true;
      }
    };

    Navigation.prototype.goto = function(index, callback) {
      if (!this.pages[index] || window.Animation.isAnimate) {
        callback(null);
        return;
      }
      this.current = index;
      return callback(this.pages[index], this.pages[index].content);
    };

    Navigation.prototype.preloadNext = function() {
      this.content.previous = this.content.current;
      this.content.current = this.content.next;
      return this.load(this.current + 1, (function(_this) {
        return function(data) {
          return _this.content.next = data;
        };
      })(this));
    };

    Navigation.prototype.preloadPrevious = function() {
      this.content.next = this.content.current;
      this.content.current = this.content.previous;
      return this.load(this.current - 1, (function(_this) {
        return function(data) {
          return _this.content.previous = data;
        };
      })(this));
    };

    Navigation.prototype.load = function(index, callback) {
      var page;
      page = this.pages[index];
      if (page) {
        return this.loadHtml(page.alias, callback);
      } else {
        return callback(null);
      }
    };

    Navigation.prototype.loadHtml = function(alias, callback) {
      return $.ajax({
        url: "" + this.url.html + alias + ".html",
        success: (function(_this) {
          return function(data) {
            return callback(data);
          };
        })(this)
      });
    };

    return Navigation;

  })();

}).call(this);

//# sourceMappingURL=navigation.map
